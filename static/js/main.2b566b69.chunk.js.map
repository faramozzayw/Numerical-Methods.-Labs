{"version":3,"sources":["components/Jumbotron.jsx","Function/MyFunc.js","components/Form.jsx","components/App.jsx","serviceWorker.js","index.js"],"names":["Jumbotron","react_default","a","createElement","className","Component","MyFunc","b","h","x","u","Math","log","Number","isFinite","v","alert","concat","state","fx","handleInputChange","e","_this","setState","Object","defineProperty","target","name","value","handleClick","preventDefault","console","clear","trim","result","_ref","type","placeholder","id","this","readOnly","onChange","bind","onClick","App","Jumbotron_Jumbotron","Form_default","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2b566b69.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nexport default class Jumbotron extends Component {\r\n\trender() {\r\n\t\treturn(\r\n\t\t\t<section className=\"uk-section uk-section-primary\">\r\n\t\t\t  <div className=\"uk-container\">\r\n\t\t\t    <h1 className=\"\">Numerical Methods. Labs №5</h1>\r\n\t\t\t  </div>\r\n\t\t\t</section>\r\n\t\t);\r\n\t};\r\n};","const MyFunc = (a, b, h) => {\r\n\tlet x = a;\r\n\tlet u = 2 - x - Math.log(x);\r\n\tif (!Number.isFinite(u)) {\r\n\t\talert('Неочікуваний результат. Будь ласка, перевірте правильність даних та спробуйте знову.')\r\n\t\treturn;\r\n\t}\r\n\t// x += h;\r\n\twhile (x <= b) {\r\n\t\tlet v = 2 - x - Math.log(x);\r\n\t\tif (u * v < 0) {\r\n\t\t\talert(`На ділянці [${(x-h) < x ? `${x-h}, ${x}` : `${x}, ${x-h}`}] існує корінь`);\r\n\t\t\tu = v;\r\n\t\t} else {\r\n\t\t\tu = v;\r\n\t\t}\r\n\t\tx += h;\r\n\t}\r\n\r\n\talert('Кінець відокремлення.');\r\n}\r\n\r\nexport default MyFunc;","import React, { Component } from 'react';\r\n\r\nimport MyFunc from './../Function/MyFunc' \r\n\r\nexport default class  extends Component {\r\n\tstate = {\r\n\t\tfx: '2 - x - lnx = 0',\r\n\t\th: '',\r\n\t\ta: '',\r\n\t\tb: ''\r\n\t}\r\n\r\n\thandleInputChange = e => this.setState({[e.target.name]: e.target.value})\r\n\r\n\thandleClick = e => {\r\n\t\te.preventDefault();\r\n\t\tconsole.clear();\r\n\t\tif (this.state.a.trim() === '' || this.state.b.trim() === '' || this.state.h.trim() === '') {\r\n\t\t\talert('Помилка вводу: порожня строка'); \r\n\t\t\treturn;\r\n\t\t}\r\n\t\tconst [a, b, h] = [Number(this.state.a), Number(this.state.b), Number(this.state.h)];\r\n\r\n\t\tlet result;\r\n\r\n\t\tNumber.isFinite(a) && Number.isFinite(b) && Number.isFinite(h) ? \r\n\t\tresult = MyFunc(a, b, h) :\r\n\t\talert('Перевірте правильність даних.');\r\n\r\n\t\tconsole.log(result);\r\n\t}\r\n\r\n\trender()  {\r\n\t\treturn (\r\n\t\t\t<div className=\"uk-container\">\r\n\t\t\t\t<form>\r\n\t\t\t    <fieldset className=\"uk-fieldset\">\r\n\r\n\t\t\t        <legend className=\"uk-legend\">Введення данних</legend>\r\n\r\n\t\t\t        <div className=\"uk-margin\">\r\n\t\t\t            <input \tclassName=\"uk-input uk-form-large\" type=\"text\" placeholder=\"Введіть рівняння\" id=\"func\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tvalue={this.state.fx}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tname='fx'\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t// onChange={this.handleInputChange.bind(this)}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\treadOnly\r\n\t\t\t\t\t\t\t\t\t />\r\n\t\t\t\t\t\t\t</div> \r\n\t\t\t\t\t\t\t<div className=\"uk-margin\">\r\n\t\t\t            <input className=\"uk-input uk-form-large\" type=\"text\" placeholder=\"Введіть початок проміжку\" id=\"first\"\r\n\t\t\t            \t\t\t\tvalue={this.state.a}\r\n\t\t\t            \t\t\t\tname='a'\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tonChange={this.handleInputChange.bind(this)}\r\n\t\t\t            \t\t\t\t/>\r\n\t\t\t         \t</div>\t\t\t\t\r\n\t\t\t        <div className=\"uk-margin\">\r\n\t\t\t            <input className=\"uk-input uk-form-large\" type=\"text\" placeholder=\"Введіть кінець проміжку\" id=\"end\"\r\n\t\t\t            \t\t\t\tvalue={this.state.b}\r\n\t\t\t            \t\t\t\tname='b'\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tonChange={this.handleInputChange.bind(this)}\r\n\t\t\t            \t\t\t\t/>\r\n\r\n\t\t\t        <div className=\"uk-margin\">\r\n\t\t\t            <input className=\"uk-input uk-form-large\" type=\"text\" placeholder=\"Введіть H\" id=\"h\"\r\n\t\t\t            \t\t\t\tvalue={this.state.h}\r\n\t\t\t            \t\t\t\tname='h'\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tonChange={this.handleInputChange.bind(this)}\r\n\t\t\t            \t\t\t\t/>\r\n\t\t\t         \t</div>\t\t\t\t\r\n\t\t\t        \t\t<button className=\"uk-button uk-button-primary\"\r\n\t\t\t        \t\tonClick={this.handleClick.bind(this)}>Почати відокремлення кореня</button>\r\n\t\t\t        </div>\r\n\t\t\t    </fieldset>\r\n\t\t\t\t</form>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nimport Jumbotron from './Jumbotron';\r\nimport Form from './Form';\r\n\r\nimport './../uikit/css/uikit.min.css';\r\nimport './../css/App.css';\r\n\r\nconst App = () => {\r\n  return(\r\n    <div className=\"App\">\r\n        <Jumbotron />\r\n        <main className=\"App-body\">\r\n          <Form />\r\n        </main>\r\n      </div>\r\n  )\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}